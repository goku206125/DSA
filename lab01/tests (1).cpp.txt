#include "sequence.hpp"
#include <utility>
#include <vector>
#include <iostream>

using namespace std;

template <typename Key, typename Info>
bool check_equal(const Sequence<Key, Info> &lhs, const vector<pair<Key, Info>> &rhs)
{
    if (lhs.size() != rhs.size())
    {
        return false;
    }
    unsigned int i = 0;
    for (auto ele : rhs)
    {
        if ((lhs.at(lhs.key_at(i)) != ele.second) or (lhs.key_at(i) != ele.first))
        {
            return false;
        }
        i = i + 1;
    }
    return true;
}
int main()
{
    std::cout << "Copy Constructor Checks\n";
    {
        Sequence<int, int> rhs;
        rhs.push_back(1, 1);
        rhs.push_back(2, 4);
        rhs.push_back(3, 9);
        Sequence<int, int> lhs(rhs);
        if (!check_equal(lhs, {{1, 1}, {2, 4}, {3, 9}}))
        {
            throw;
        }
    }
    std::cout << "Assignment Operator Checks\n";
    {
        Sequence<int, int> lhs, rhs;
        rhs.push_back(1, 1);
        rhs.push_back(2, 4);
        rhs.push_back(3, 9);
        lhs = rhs;
        if (!check_equal(lhs, {{1, 1}, {2, 4}, {3, 9}}))
        {
            throw;
        }
    }
    std::cout << "size method Checks\n";
    {
        Sequence<int, int> s;
        s.push_back(1, 1);
        s.push_back(2, 4);
        s.push_back(3, 9);
        if (s.size() != 3)
        {
            throw;
        }
    }
    std::cout << "push_front method Checks\n";
    {
        Sequence<int, int> s;
        s.push_back(1, 1);
        s.push_back(2, 4);
        s.push_back(3, 9);
        s.push_front(4, 16);
        if (!check_equal(s, {{4, 16}, {1, 1}, {2, 4}, {3, 9}}))
        {
            throw;
        }
    }
    std::cout << "pop_front method Checks\n";
    {
        Sequence<int, int> s;
        s.push_back(1, 1);
        s.push_back(2, 4);
        s.push_back(3, 9);
        bool result = s.pop_front();
        if (!check_equal(s, {{2, 4}, {3, 9}}) && !result)
        {
            throw;
        }
        Sequence<int, int> x;
        result = x.pop_front();
        if (!check_equal(x, {}) && result)
        {
            throw;
        }
    }
    std::cout << "push_back method Checks\n";
    {
        Sequence<int, int> s;
        s.push_back(1, 1);
        s.push_back(2, 4);
        s.push_back(3, 9);
        if (!check_equal(s, {{1, 1}, {2, 4}, {3, 9}}))
        {
            throw;
        }
    }
    std::cout << "pop_back method Checks\n";
    {
        Sequence<int, int> s;
        s.push_back(1, 1);
        s.push_back(2, 4);
        s.push_back(3, 9);
        bool result = s.pop_back();
        if (!check_equal(s, {{2, 4}, {3, 9}}) && !result)
        {
            throw;
        }
        Sequence<int, int> x;
        result = x.pop_back();
        if (!check_equal(x, {}) && result)
        {
            throw;
        }
    }
    {
        Sequence<int, int> s, x, r;
        s.push_back(9, 9);
        s.push_back(2, 4);
        s.push_back(3, 9);
        x.push_back(1, 1);
        x.push_back(2, 4);
        x.push_back(4, 9);
        r = shuffle(s, 2, x, 1, 5);
        if (check_equal(r, {{9, 9}, {2, 4}, {1, 1}, {3, 9}, {2, 4}, {4, 9}}))
        {
            cout << "Shuffle function passed";
        }
        else
        {
            cout << "Shuffle function failed";
        }
    }
}
